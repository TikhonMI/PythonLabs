# Модули
import math
import statistics

#--------------------------------------------------------------------------------------
# 01 Модуль math
#Тригонометрические функции:
x = 0.5 # x - радины
math.sin(x) #вычисляет синус
math.cos(x) #вычисляет косинус
math.tan(x) #вычисляет тангенс
math.asin(x) #вычисляет арксинус
math.acos(x) #вычисляет арккосинус
math.atan(x) #вычисляет арктангенс

#Гиперболические функции:
math.sinh(x) #гиперболический синус
math.cosh(x) #гиперболический косинус
math.tanh(x) #гиперболический тангенс
#обратные гиперболические функции
math.asinh(x)
math.acosh(1) 
math.atanh(x)

#Экспоненциальные и логарифмические функции:
y = 3
math.exp(x) #число Эйлера в степени x

math.log(x) # Натуральный логарифм числа x (основание 'e' по умолчанию)
math.log(x, y) # логарифм числа x по основанию y
math.log10(x) # десятичный логарифм числа x
math.log2(x) # логарифм по основанию 2 числа x
    
#Функции для работы с квадратными корнями:
math.sqrt(x) #квадратный корень из числа

math.pow(x, y) #x в степени y

#Функции для работы с числами с плавающей запятой:
math.ceil(x) #округление вверх
math.floor(x) #округление вниз
math.trunc(x) # отбрасывание дробной части, округление к нулю
math.fabs(x) # абсолютное значение числа x

#Функции для вычисления факториала и двойного факториала:
math.factorial(3) #факториал числа x
math.gamma(x) # гамма-функция числа x (аналогична факториалу для нецелых чисел)
math.lgamma(x) # натуральный логарифм модуля гамма-функции числа x

#Функции для работы с комплексными числами
math.isinf(x) # проверяет, является ли x бесконечностью
math.isnan(x) # проверяет, является ли x NaN (Not a Number)

#Константы:    
math.pi #константа, Пи
math.e #константа, число Эйлера

#--------------------------------------------------------------------------------------
# 02 Модуль statistics функции для вычисления статистических параметров для числовых данных
data = [1, 2, 2, 3, 4, 10, 12]

# Вычисление среднего арифметического
print(statistics.mean(data))  # Выводит примерно 4.857142857142857

# Вычисление медианы
print(statistics.median(data))  # вычисляет медиану для упорядоченного набора данных
print(statistics.median_low(data)) #вычисляет низкую медиану
print(statistics.median_high(data)) #вычисляет высокую медиану

# Вычисление моды (наиболее часто встречающееся значение) для набора данных
print(statistics.mode(data))  # Выводит 2

# Вычисление дисперсии для набора данных
print(statistics.variance(data))  # Выводит примерно 18.80952380952381

# Вычисление стандартного отклонения для набора данных
print(statistics.stdev(data))  # Выводит примерно 4.337226920964921

#--------------------------------------------------------------------------------------
# 03 
import random
"""
Напишите программу, в которой создайте список из десяти целых чисел.
 Затем реализуйте подсчет суммы чисел списка, среднего значения,
медианы (median) и стандартного отклонения (stdev), предварительно
импортировав соответствующие модули.
 Реализуйте программу, в которой генерируется случайное число на
интервале от 1 до 100. Для генерации числа используйте функцию randint
модуля random.
"""
x = 10
l = []
for i in range(x):
    num = random.randint(1, 100)
    l.append(num)
    
print(l)
summ = sum(l)
print(f"Сумма чисел списка: {summ}")
averageCost = statistics.mean(l)
print(f"Среднее значение чисел списка: {averageCost}")
print(f"Медиана: {statistics.median(l)}")
print(f"Стандартное отклонение: {statistics.stdev(l)}")
    
#--------------------------------------------------------------------------------------
from decimal import Decimal # полезно в финансовых или научных расчетах, где важна точность представления чисел

# Создание объекта Decimal
x = Decimal('3.14159')
y = Decimal('2.71828')

# Выполнение вычислений с высокой точностью
z = x + y
print(z)

# Вывод типа объекта Decimal
print(type(z))  # Выводит: <class 'decimal.Decimal'>